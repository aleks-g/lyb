# SPDX-FileCopyrightText: 2022 Koen van Greevenbroek & Aleksander Grochowicz
#
# SPDX-License-Identifier: CC0-1.0

# The name needs to match the filename of this config.
name: "nordics-focus"

# The scenario and intersection_scenarios config is used only in order
# to determine which results are required for the various "*_all_*"
# Snakemake rules. Each entry corresponds to a Snakemake wildcard.
# Multiple values may be specified for each wildcard; all combinations
# will be computed. See the Snakefile for a description of each
# wildcard.

intersection_scenarios:
  eps: ["0.05uni"] 
  common:
    simpl: ""
    # Number of clusters in focus region, neighbouring countries and
    # the rest of the network.
    clusters: "20-25-15"
    # Total transmission network expansion may not exceed 25% in
    # volume (single constraint for whole network, not applied to
    # individual lines).
    lv: "1.25"
    # Costs are for 2050
    planning_horizons: "2050"
    # Other options:
    # - Co2L0: Limit CO2 emissions to 0,
    # - 1500seg: Cluster time dimension to 1500 segments (note that 1H
    #   option is made redundant by this but still needed for the code
    #   to work),
    # - T: transport sector
    # - H: heat sector
    # - B: biomass sector
    # - I: industry sector
    # - A: agriculture sector
    # - EQ0.75c: enforce 75% of electricity demand to be met by
    #   local production for each country.
    sector_opts: "Co2L0-1H-1500seg-T-H-B-I-A-EQ0.75c"
  scenarios:
    # Note: 24% and 39% cost increases for onshore wind and solar
    # respectively are taken from the upper cost range given by DEA (Sheet 20: Nominal investment/22: *total, per DC).
    expensive-wind-1987: {year: "1987", sector_opts: "solar+p3-onwind+c1.24-offwind+c1.24"}
    expensive-solar-1987: {year: "1987", sector_opts: "solar+p3-solar+c1.39"}
    baseline-1987: {year: "1987", sector_opts: "solar+p3"}
    expensive-wind-2010: {year: "2010", sector_opts: "solar+p3-onwind+c1.24-offwind+c1.24"}
    expensive-solar-2010: {year: "2010", sector_opts: "solar+p3-solar+c1.39"}
    baseline-2010: {year: "2010", sector_opts: "solar+p3"}
    expensive-wind-1985: {year: "1985", sector_opts: "solar+p3-onwind+c1.24-offwind+c1.24"}
    expensive-solar-1985: {year: "1985", sector_opts: "solar+p3-solar+c1.39"}
    baseline-1985: {year: "1985", sector_opts: "solar+p3"}
    landuse-1987: {year: "1987"}
    landuse-2010: {year: "2010"}
    landuse-1985: {year: "1985"}

# The following config section relates to how the near-optimal
# feasible space is approximated.
near_opt_approx:
  # Essential configuration:
  
  # Direction generation method, either "facets", "random-uniform",
  # "random-lhc", "maximal-centre" or "maximal-centre-then-facets".
  directions: "maximal-centre-then-facets-then-random"
  # Minimum angle threshold between directions.
  directions_angle_separation: 45
  # The number of parallel solvers used in the near-optimal feasible
  # space approximation.
  num_parallel_solvers: 8

  # Convergence configuration. All in all, the below means that the
  # near-optimal space approximation will terminate when the volume
  # changes by less than `conv_epsilon` percent for any `conv_iterations` 
  # consecutive iterations, or after `iterations` iterations at most. 
  # Number of iterations.
  iterations: 450
  # Convergence method, either "centre" or "volume".
  conv_method: "volume"
  # Convergence epsilon in percent.
  conv_epsilon: 0.5
  # Number of iterations for which the convergence criterion must be
  # below the convergence epsilon before the approximation stops.
  conv_iterations: 50
  
  # Command line options for the `qhull` program, which is used to
  # compute convex hulls, may be defined here. The default options
  # usually work well in which case this is not needed. If qhull fails
  # for any reason, one could try to options "W1e-6 C1e-6 Q12" to get
  # an approximate convex hull computation (see
  # http://www.qhull.org/html/qh-optq.htm).
  qhull_options:
    # Used for routine convex hull computations (e.g. in compute_near_opt)
    near_opt: "Qt C1e-3 W1e-3 Q14 Qx"
    # Used when an approximate convex hull computation is needed
    # (input spaces in intersection computation)
    near_opt_approx: "Qt C1e-3 W1e-3 Q14 Qx"
    # Used for halfspace intersection computations
    intersection: "Qt C5e-3 W1e-2"

  # Optionally use pre_clustering to reduce the number of constraints
  # used to compute intersections of convex hulls.
  intersection_pre_cluster:
    enabled: True
    n_clusters: 20000

  # Angle tolerance: when no new directions are found which are at
  # least this number of degrees away from previously used directions,
  # we stop the approximation.
  # angle_tolerance: 0.1

# Specification of the basis we project the near-optimal feasible space onto. 
projection:
  solar-in:
    - {regions: "in", c: "Generator", v: "p_nom", carrier: "solar", weight: "capital_cost", scale_by_years: True}
  solar-out:
    - {regions: "not-in", c: "Generator", v: "p_nom", carrier: "solar", weight: "capital_cost", scale_by_years: True}
  onwind-in:
    - {regions: "in", c: "Generator", v: "p_nom", carrier: "onwind", weight: "capital_cost", scale_by_years: True}
  onwind-out:
    - {regions: "not-in", c: "Generator", v: "p_nom", carrier: "onwind", weight: "capital_cost", scale_by_years: True}
  offwind-in:
    - {regions: "in", c: "Generator", v: "p_nom", carrier: "offwind-ac", weight: "capital_cost", scale_by_years: True}
    - {regions: "in", c: "Generator", v: "p_nom", carrier: "offwind-dc", weight: "capital_cost", scale_by_years: True}
  offwind-out:
    - {regions: "not-in", c: "Generator", v: "p_nom", carrier: "offwind-ac", weight: "capital_cost", scale_by_years: True}
    - {regions: "not-in", c: "Generator", v: "p_nom", carrier: "offwind-dc", weight: "capital_cost", scale_by_years: True}
  hydrogen-in:
    - {regions: "in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "H2 Electrolysis"}
    - {regions: "in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "H2 Fuel Cell"}
    - {regions: "in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "H2 pipeline retrofitted"}
    - {regions: "in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "H2 pipeline"}
    - {regions: "in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "Sabatier"}
    - {regions: "in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "Fischer-Tropsch"}
    - {regions: "in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "SMR"}
    - {regions: "in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "SMR CC"}
    - {regions: "in", c: "Store", v: "e_nom", weight: "capital_cost", scale_by_years: True, carrier: "H2"}
  hydrogen-out:
    - {regions: "not-in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "H2 Electrolysis"}
    - {regions: "not-in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "H2 Fuel Cell"}
    - {regions: "not-in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "H2 pipeline retrofitted"}
    - {regions: "not-in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "H2 pipeline"}
    - {regions: "not-in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "Sabatier"}
    - {regions: "not-in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "Fischer-Tropsch"}
    - {regions: "not-in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "SMR"}
    - {regions: "not-in", c: "Link", v: "p_nom", weight: "capital_cost", scale_by_years: True, carrier: "SMR CC"}
    - {regions: "not-in", c: "Store", v: "e_nom", weight: "capital_cost", scale_by_years: True, carrier: "H2"}

# Provide some readable labels of the above dimensions for figures.
projection_labels:
  solar-in: "Solar (in)"
  solar-out: "Solar (out)"
  onwind-in: "Onshore wind (in)"
  onwind-out: "Onshore wind (out)"
  offwind-in: "Offshore wind (in)"
  offwind-out: "Offshore wind (out)"
  hydrogen-in: "H2 infr. (in)"
  hydrogen-out: "H2 infr. (out)"
  
# Here, specify what we mean if the above projection specification
# includes named regions of the form "regions: foo". That option will
# be translated according to the below config, such that, for example,
# "region: foo" becomes "regions: ['DE', 'NL', 'BE']" if we specify
# "foo: ['DE', 'NL', 'BE']" below. Additionally, "not-foo" will be
# translated to a list of all countries _not_ in "foo".
projection_regions:
  in: ["NO", "SE", "DK", "FI"]

# This is to configure computation of robust networks (i.e. located in
# the intersection), used to calculation export ranges.
robust_networks:
  num_robust: 400
  num_parallel: 12
  dim_groups:
  - ["onwind-in", "offwind-in", "solar-in"]
  - ["hydrogen-in"]
  - ["onwind-out", "offwind-out", "solar-out"]
  - ["hydrogen-out"]
  robust_base: "baseline-2010"
  opts_substitutions:
    "1500seg": "500seg"

# Apply some formatting to the logging so each entry shows the time it was logged.
logging:
  format: "%(asctime)s %(levelname)s %(module)s - %(funcName)s: %(message)s"
  datefmt: "%Y-%m-%d %H:%M:%S"


# The following section is used as pypsa-eur configuration (updating
# the default pypsa-eur config)
pypsa-eur:
  run:
    shared_cutouts: true

  enable:
    retrieve_opsd_load_data: false
    retrieve_artificial_load_data: true
    drop_leap_days: true

  focus_clustering:
    countries: ["NO", "SE", "DK", "FI"]

  clustering:
    constant_weather_year: "1985"
    cluster_network:
      algorithm: "hac"
    aggregation_strategies:
      # We need to provide an aggregation strategy for p_max_pu
      # (constant capacity factor, not time-dependent in this case)
      # because nuclear generators from different countries with
      # different capacity factors need to be aggregated.
      generators:
        p_max_pu: mean

  # For all the following configuration, see the PyPSA-Eur documentation.
  electricity:
    co2limit: 7.75e+7 # 0.05 * 3.1e9*0.5
    co2base: 1.487e+9

    extendable_carriers:
      Generator: ["solar", "onwind", "offwind-ac", "offwind-dc"]
      StorageUnit: ["battery", "H2"]
      Store: []
      Link: []

    # Use all renewable carriers
    renewable_carriers: ["solar", "onwind", "offwind-ac", "offwind-dc", "hydro"]
    # Add existing nuclear and biomass power plants to the model. Note
    # that we do not include OCGT here, but since OCGT is defined as
    # an extendable carrier, it will be added to the model at 0
    # initial capacity.
    conventional_carriers: ["nuclear", "biomass"] # nuclear, oil, OCGT, CCGT, coal, lignite, geothermal, biomass

    # Remove nuclear from Germany.
    powerplants_filter: "(Country != 'DE') or (Fueltype != 'Nuclear')"

    # Make this a greenfield optimisation w.r.t. renewables.
    estimate_renewable_capacities:
      enable: false

  # load:
  #   # Baseline in European Commission scenario from
  #   # https://ec.europa.eu/clima/eu-action/european-green-deal/2030-climate-target-plan_en
  #   scaling_factor: 1.13

  atlite:
    nprocesses: 4
    show_progress: False # This improves performance by a lot.
    cutouts:
      # use "base" to determine geographical bounds and time span from config.
      europe-era5:
        module: "era5"

  renewable:
    # Note that the cutouts have been renamed from default PyPSA-Eur.
    onwind:
      cutout: "europe-era5"
    offwind-ac:
      cutout: "europe-era5"
    offwind-dc:
      cutout: "europe-era5"
    solar:
      cutout: "europe-era5"
    hydro:
      cutout: "europe-era5"
      eia_correct_by_capacity: true
      eia_approximate_missing: true

  solving:
    options:
      formulation: "kirchhoff"
      noisy_costs: False
      skip_iterations: True
      track_iterations: False
      clip_p_max_pu: 1.e-2
    tmpdir: "./tmp/"
    use-scratch: true
    solver:
      name: "gurobi"
      LogToConsole: 1
      OutputFlag: 1
      threads: 3
      method: 2 # barrier
      crossover: 0
      BarConvTol: 1.e-5
      FeasibilityTol: 1.e-6
      AggFill: 0
      PreDual: 0
      GURO_PAR_BARDENSETHRESH: 200


pypsa-eur-sec:
  atlite:
    cutout: europe-era5_{weather_year}
    drop_leap_day: true

  sector:
    gas_network: true
    H2_retrofit: true
    biomass_transport: true
    conventional_generation: # generator : carrier
      OCGT: "gas"
      # Add nuclear; this is treated specially and existing capacities
      # from pypsa-eur are carried over to pypsa-eur-sec (as opposed
      # to all other conventional techs).
      nuclear: "uranium"
